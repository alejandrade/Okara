plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'idea'
    id 'com.github.node-gradle.node' version '7.1.0'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2023.0.0"
        mavenBom "com.google.cloud:libraries-bom:26.28.0"
    }
}

group = 'io.shrouded'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
    targetCompatibility = '21'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    
    // Firebase Admin SDK
    implementation 'com.google.firebase:firebase-admin:9.4.1'
    
    // Google Cloud Datastore (temporarily back to this to get it working)
    implementation("com.google.cloud:spring-cloud-gcp-starter-data-firestore:7.1.0")
    // Google Cloud Pub/Sub
    implementation 'com.google.cloud:spring-cloud-gcp-starter-pubsub:7.1.0'
    // Google Cloud Storage
    implementation 'com.google.cloud:google-cloud-storage'
    
    // Spring Integration (required for Pub/Sub messaging)
    implementation 'org.springframework.boot:spring-boot-starter-integration'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    
    // MapStruct
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

node {
    version = '20.18.0'
    npmVersion = '10.8.2'
    download = true
    nodeProjectDir = file("${project.projectDir}/frontend")
}

tasks.register('cleanNpm', Delete) {
    delete 'frontend/node_modules'
    delete 'frontend/package-lock.json'
}

tasks.register('cleanGradleNode', Delete) {
    delete '.gradle/npm'
    delete '.gradle/nodejs'
}

tasks.register('npmInstallClean', NpmTask) {
    dependsOn cleanNpm
    npmCommand = ['install']
}


tasks.named('test') {
    useJUnitPlatform()
}

idea {
    module {
        excludeDirs += [
            file('frontend/node_modules'),
            file('frontend/build'),
            file('.gradle'),
            file('build')
        ]
        
        // Mark source directories
        sourceDirs += [
            file('src/main/java'),
            file('src/main/resources')
        ]
        
        // Mark test directories
        testSourceDirs += [
            file('src/test/java'),
            file('src/test/resources')
        ]
    }
    
    project {
        jdkName = '21'
        languageLevel = '21'
        
        ipr {
            withXml { provider ->
                def node = provider.asNode()
                
                // Add code style settings
                def codeStyleManager = node.appendNode('component', [name: 'CodeStyleManager'])
                codeStyleManager.appendNode('option', [name: 'USE_DEFAULT_CODE_STYLE_SCHEME', value: 'true'])
                
                // Add project format
                def projectRootManager = node.find { it.@name == 'ProjectRootManager' }
                if (projectRootManager) {
                    projectRootManager.@'project-jdk-name' = '21'
                    projectRootManager.@'project-jdk-type' = 'JavaSDK'
                }
            }
        }
    }
}